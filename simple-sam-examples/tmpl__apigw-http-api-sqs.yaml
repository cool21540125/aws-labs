AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Lambda function triggered by an AWS API Gateway HTTP APIs call
  through an Amazon SQS Queue for buffering

# Comment each resource section to explain usage
Resources:

  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MySqsQueue

  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt MyHttpApiAccessLogs.Arn
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigatewayv2-stage-accesslogsettings.html
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol",
          "responseLength":"$context.responseLength" }'
      DefinitionBody:
        # OpenAPI, (也可用 DefinitionUri)
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-include.html
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: openapi/apigw-http-api-sqs.yaml

  # SQS 調用 LambdaFn
  SQSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SQSLambdaFunction
      Description: Lambda to be invoked by the SQS Queue
      CodeUri: src/apigw-http-api-sqs/index.zip
      Handler: index.handler
      Runtime: python3.13
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 512
      Events:
        MySQSEvent:
          # 丟到此 SQS Queue 的 Message, 會來調用 Function
          Type: SQS
          Properties:
            Queue: !GetAtt MySqsQueue.Arn
            BatchSize: 10

  # Role for ApiGw -> SQS
  MyHttpApiRole:
    Type: AWS::IAM::Role # 建立一個 Role, 允許 apigw 丟 Message 到 SQS Queue
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowSqsIntegration
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                  - sqs:SendMessageBatch
                Resource: !GetAtt MySqsQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: !GetAtt MyHttpApiAccessLogs.Arn

  MyHttpApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: MyHttpApi-Access-Logs
      RetentionInDays: 1

##########################################################################
#   Outputs                                                              #
##########################################################################
Outputs:
  MyHttpApiEndpoint:
    Description: HTTP API endpoint
    Value: !Sub https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com

  SQSLambdaFunction:
    Description: SQSLambdaFunction function name
    Value: !Ref SQSLambdaFunction

  MySqsQueueARN:
    Description: SQS queue ARN
    Value: !GetAtt MySqsQueue.Arn

  MySqsQueueURL:
    Description: SQS queue URL
    Value: !Ref MySqsQueue